// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "cstrike15_gcmessages.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// Cut down version of cstrike15_gcmessages.proto

/**
 * @generated from protobuf message CEconItemPreviewDataBlock
 */
export interface CEconItemPreviewDataBlock {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint64 itemid = 2;
     */
    itemid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 defindex = 3;
     */
    defindex?: number;
    /**
     * @generated from protobuf field: optional uint32 paintindex = 4;
     */
    paintindex?: number;
    /**
     * @generated from protobuf field: optional uint32 rarity = 5;
     */
    rarity?: number;
    /**
     * @generated from protobuf field: optional uint32 quality = 6;
     */
    quality?: number;
    /**
     * @generated from protobuf field: optional uint32 paintwear = 7;
     */
    paintwear?: number;
    /**
     * @generated from protobuf field: optional uint32 paintseed = 8;
     */
    paintseed?: number;
    /**
     * @generated from protobuf field: optional uint32 killeaterscoretype = 9;
     */
    killeaterscoretype?: number;
    /**
     * @generated from protobuf field: optional uint32 killeatervalue = 10;
     */
    killeatervalue?: number;
    /**
     * @generated from protobuf field: optional string customname = 11;
     */
    customname?: string;
    /**
     * @generated from protobuf field: repeated CEconItemPreviewDataBlock.Sticker stickers = 12;
     */
    stickers: CEconItemPreviewDataBlock_Sticker[];
    /**
     * @generated from protobuf field: optional uint32 inventory = 13;
     */
    inventory?: number;
    /**
     * @generated from protobuf field: optional uint32 origin = 14;
     */
    origin?: number;
    /**
     * @generated from protobuf field: optional uint32 questid = 15;
     */
    questid?: number;
    /**
     * @generated from protobuf field: optional uint32 dropreason = 16;
     */
    dropreason?: number;
    /**
     * @generated from protobuf field: optional uint32 musicindex = 17;
     */
    musicindex?: number;
    /**
     * @generated from protobuf field: optional int32 entindex = 18;
     */
    entindex?: number;
    /**
     * @generated from protobuf field: optional uint32 petindex = 19;
     */
    petindex?: number;
    /**
     * @generated from protobuf field: repeated CEconItemPreviewDataBlock.Sticker keychains = 20;
     */
    keychains: CEconItemPreviewDataBlock_Sticker[];
}
/**
 * @generated from protobuf message CEconItemPreviewDataBlock.Sticker
 */
export interface CEconItemPreviewDataBlock_Sticker {
    /**
     * @generated from protobuf field: optional uint32 slot = 1;
     */
    slot?: number;
    /**
     * @generated from protobuf field: optional uint32 sticker_id = 2;
     */
    stickerId?: number;
    /**
     * @generated from protobuf field: optional float wear = 3;
     */
    wear?: number;
    /**
     * @generated from protobuf field: optional float scale = 4;
     */
    scale?: number;
    /**
     * @generated from protobuf field: optional float rotation = 5;
     */
    rotation?: number;
    /**
     * @generated from protobuf field: optional uint32 tint_id = 6;
     */
    tintId?: number;
    /**
     * @generated from protobuf field: optional float offset_x = 7;
     */
    offsetX?: number;
    /**
     * @generated from protobuf field: optional float offset_y = 8;
     */
    offsetY?: number;
    /**
     * @generated from protobuf field: optional float offset_z = 9;
     */
    offsetZ?: number;
    /**
     * @generated from protobuf field: optional uint32 pattern = 10;
     */
    pattern?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CEconItemPreviewDataBlock$Type extends MessageType<CEconItemPreviewDataBlock> {
    constructor() {
        super("CEconItemPreviewDataBlock", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "itemid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "defindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "paintindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "rarity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "quality", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "paintwear", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "paintseed", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "killeaterscoretype", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "killeatervalue", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "customname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "stickers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CEconItemPreviewDataBlock_Sticker },
            { no: 13, name: "inventory", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "origin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "questid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "dropreason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "musicindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 18, name: "entindex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "petindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 20, name: "keychains", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CEconItemPreviewDataBlock_Sticker }
        ]);
    }
    create(value?: PartialMessage<CEconItemPreviewDataBlock>): CEconItemPreviewDataBlock {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stickers = [];
        message.keychains = [];
        if (value !== undefined)
            reflectionMergePartial<CEconItemPreviewDataBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CEconItemPreviewDataBlock): CEconItemPreviewDataBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint64 itemid */ 2:
                    message.itemid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 defindex */ 3:
                    message.defindex = reader.uint32();
                    break;
                case /* optional uint32 paintindex */ 4:
                    message.paintindex = reader.uint32();
                    break;
                case /* optional uint32 rarity */ 5:
                    message.rarity = reader.uint32();
                    break;
                case /* optional uint32 quality */ 6:
                    message.quality = reader.uint32();
                    break;
                case /* optional uint32 paintwear */ 7:
                    message.paintwear = reader.uint32();
                    break;
                case /* optional uint32 paintseed */ 8:
                    message.paintseed = reader.uint32();
                    break;
                case /* optional uint32 killeaterscoretype */ 9:
                    message.killeaterscoretype = reader.uint32();
                    break;
                case /* optional uint32 killeatervalue */ 10:
                    message.killeatervalue = reader.uint32();
                    break;
                case /* optional string customname */ 11:
                    message.customname = reader.string();
                    break;
                case /* repeated CEconItemPreviewDataBlock.Sticker stickers */ 12:
                    message.stickers.push(CEconItemPreviewDataBlock_Sticker.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 inventory */ 13:
                    message.inventory = reader.uint32();
                    break;
                case /* optional uint32 origin */ 14:
                    message.origin = reader.uint32();
                    break;
                case /* optional uint32 questid */ 15:
                    message.questid = reader.uint32();
                    break;
                case /* optional uint32 dropreason */ 16:
                    message.dropreason = reader.uint32();
                    break;
                case /* optional uint32 musicindex */ 17:
                    message.musicindex = reader.uint32();
                    break;
                case /* optional int32 entindex */ 18:
                    message.entindex = reader.int32();
                    break;
                case /* optional uint32 petindex */ 19:
                    message.petindex = reader.uint32();
                    break;
                case /* repeated CEconItemPreviewDataBlock.Sticker keychains */ 20:
                    message.keychains.push(CEconItemPreviewDataBlock_Sticker.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CEconItemPreviewDataBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint64 itemid = 2; */
        if (message.itemid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemid);
        /* optional uint32 defindex = 3; */
        if (message.defindex !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.defindex);
        /* optional uint32 paintindex = 4; */
        if (message.paintindex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.paintindex);
        /* optional uint32 rarity = 5; */
        if (message.rarity !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.rarity);
        /* optional uint32 quality = 6; */
        if (message.quality !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.quality);
        /* optional uint32 paintwear = 7; */
        if (message.paintwear !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.paintwear);
        /* optional uint32 paintseed = 8; */
        if (message.paintseed !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.paintseed);
        /* optional uint32 killeaterscoretype = 9; */
        if (message.killeaterscoretype !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.killeaterscoretype);
        /* optional uint32 killeatervalue = 10; */
        if (message.killeatervalue !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.killeatervalue);
        /* optional string customname = 11; */
        if (message.customname !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.customname);
        /* repeated CEconItemPreviewDataBlock.Sticker stickers = 12; */
        for (let i = 0; i < message.stickers.length; i++)
            CEconItemPreviewDataBlock_Sticker.internalBinaryWrite(message.stickers[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 inventory = 13; */
        if (message.inventory !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.inventory);
        /* optional uint32 origin = 14; */
        if (message.origin !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.origin);
        /* optional uint32 questid = 15; */
        if (message.questid !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.questid);
        /* optional uint32 dropreason = 16; */
        if (message.dropreason !== undefined)
            writer.tag(16, WireType.Varint).uint32(message.dropreason);
        /* optional uint32 musicindex = 17; */
        if (message.musicindex !== undefined)
            writer.tag(17, WireType.Varint).uint32(message.musicindex);
        /* optional int32 entindex = 18; */
        if (message.entindex !== undefined)
            writer.tag(18, WireType.Varint).int32(message.entindex);
        /* optional uint32 petindex = 19; */
        if (message.petindex !== undefined)
            writer.tag(19, WireType.Varint).uint32(message.petindex);
        /* repeated CEconItemPreviewDataBlock.Sticker keychains = 20; */
        for (let i = 0; i < message.keychains.length; i++)
            CEconItemPreviewDataBlock_Sticker.internalBinaryWrite(message.keychains[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CEconItemPreviewDataBlock
 */
export const CEconItemPreviewDataBlock = new CEconItemPreviewDataBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CEconItemPreviewDataBlock_Sticker$Type extends MessageType<CEconItemPreviewDataBlock_Sticker> {
    constructor() {
        super("CEconItemPreviewDataBlock.Sticker", [
            { no: 1, name: "slot", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sticker_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "wear", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "scale", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "rotation", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "tint_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "offset_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "offset_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "offset_z", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "pattern", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CEconItemPreviewDataBlock_Sticker>): CEconItemPreviewDataBlock_Sticker {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CEconItemPreviewDataBlock_Sticker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CEconItemPreviewDataBlock_Sticker): CEconItemPreviewDataBlock_Sticker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 slot */ 1:
                    message.slot = reader.uint32();
                    break;
                case /* optional uint32 sticker_id */ 2:
                    message.stickerId = reader.uint32();
                    break;
                case /* optional float wear */ 3:
                    message.wear = reader.float();
                    break;
                case /* optional float scale */ 4:
                    message.scale = reader.float();
                    break;
                case /* optional float rotation */ 5:
                    message.rotation = reader.float();
                    break;
                case /* optional uint32 tint_id */ 6:
                    message.tintId = reader.uint32();
                    break;
                case /* optional float offset_x */ 7:
                    message.offsetX = reader.float();
                    break;
                case /* optional float offset_y */ 8:
                    message.offsetY = reader.float();
                    break;
                case /* optional float offset_z */ 9:
                    message.offsetZ = reader.float();
                    break;
                case /* optional uint32 pattern */ 10:
                    message.pattern = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CEconItemPreviewDataBlock_Sticker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 slot = 1; */
        if (message.slot !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.slot);
        /* optional uint32 sticker_id = 2; */
        if (message.stickerId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stickerId);
        /* optional float wear = 3; */
        if (message.wear !== undefined)
            writer.tag(3, WireType.Bit32).float(message.wear);
        /* optional float scale = 4; */
        if (message.scale !== undefined)
            writer.tag(4, WireType.Bit32).float(message.scale);
        /* optional float rotation = 5; */
        if (message.rotation !== undefined)
            writer.tag(5, WireType.Bit32).float(message.rotation);
        /* optional uint32 tint_id = 6; */
        if (message.tintId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.tintId);
        /* optional float offset_x = 7; */
        if (message.offsetX !== undefined)
            writer.tag(7, WireType.Bit32).float(message.offsetX);
        /* optional float offset_y = 8; */
        if (message.offsetY !== undefined)
            writer.tag(8, WireType.Bit32).float(message.offsetY);
        /* optional float offset_z = 9; */
        if (message.offsetZ !== undefined)
            writer.tag(9, WireType.Bit32).float(message.offsetZ);
        /* optional uint32 pattern = 10; */
        if (message.pattern !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.pattern);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CEconItemPreviewDataBlock.Sticker
 */
export const CEconItemPreviewDataBlock_Sticker = new CEconItemPreviewDataBlock_Sticker$Type();
